package clientExamSwing;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

import clientswing.MainFrame;
import common.AddI;
import common.AddO;
import pojo.Question;
import pojo.ServerList;
import pojo.Studentreg;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author naruto
 */
public class Condexmsub extends javax.swing.JFrame implements ActionListener {
	private long time = 0;
	private Timer tr;
	// int duration;
	private AddI serverObj;
	private AddO server1;
	private AddO server2;
	private Studentreg user;
	private List<Object> questionList;
	private Question ques;
	private int questionNo;
	List<String> options;
	String questiontext;
	Integer paperId;
	private Integer subId;

	public Condexmsub(long duration, Studentreg user, AddI serverObj, AddO server1, AddO server2, int questionNo,
			ArrayList<Object> questionList, Integer paperId, Integer subId) {
		this.user = (Studentreg) user;
		this.questionList = questionList;
		this.ques = (Question) this.questionList.get(questionNo - 1);
		this.serverObj = serverObj;
		this.server1 = server1;
		this.server2 = server2;
		this.questionNo = questionNo;
		this.paperId = paperId;
		this.subId = subId;
		System.out.println("quid" + questionNo);
		System.out.println(duration);
		this.questiontext = this.ques.getQquestion();
		this.time = duration;
		initComponents();
		   setTitle("WELCOME TO ONLINE QUIZ SYSTEM ");
		tr = new Timer(1000, this);
	}

	public void setParentFrame(JFrame f) {
		parent = f;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		username = new javax.swing.JLabel();
		timeleft = new javax.swing.JLabel();
		question = new javax.swing.JLabel();
		queno1 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		label = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		jScrollPane2 = new javax.swing.JScrollPane();
		answer = new javax.swing.JTextArea();
		next = new javax.swing.JButton();
		finish = new javax.swing.JButton();
		questionno = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				formWindowClosing(evt);
			}

			public void windowOpened(java.awt.event.WindowEvent evt) {
				formWindowOpened(evt);
			}
		});

		jLabel4.setFont(new java.awt.Font("Serif", 0, 24)); // NOI18N
		jLabel4.setText("Quiz:"+ this.paperId);

		jLabel1.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		jLabel1.setText("Username:");

		username.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		username.setText(this.user.getSname());

		timeleft.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		timeleft.setText("timeleft:");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(jLabel1)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 46,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(193, 193, 193).addComponent(jLabel4)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(timeleft).addGap(28, 28, 28)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel1).addComponent(username))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel1Layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel4).addComponent(timeleft))
								.addContainerGap()));

		question.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		question.setText("Question:");

		queno1.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		queno1.setText("Questionnumber:");

		jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jTextArea1.setEditable(false);
		jTextArea1.setText(this.questiontext);
		jScrollPane1.setViewportView(jTextArea1);

		label.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		label.setText("Answer:");

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 100, Short.MAX_VALUE));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 100, Short.MAX_VALUE));

		answer.setColumns(20);
		answer.setRows(5);
		jScrollPane2.setViewportView(answer);

		next.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		next.setText("NEXT");
		next.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				nextActionPerformed(evt);
			}
		});

		finish.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		finish.setText("FINISH");
		finish.setEnabled(false);
		finish.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				finishActionPerformed(evt);
			}
		});

		questionno.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
		questionno.setText(Integer.toString(this.questionNo));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(question).addComponent(label))
										.addGap(18, 18, 18)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 517,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(next)))
								.addGroup(layout.createSequentialGroup().addComponent(queno1)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(questionno, javax.swing.GroupLayout.PREFERRED_SIZE, 48,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(finish)))
				.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup()
				.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.PREFERRED_SIZE)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup().addGap(174, 174, 174).addComponent(jPanel2,
								javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup().addGap(11, 11, 11)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(queno1, javax.swing.GroupLayout.PREFERRED_SIZE, 29,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(questionno))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(question).addComponent(jScrollPane1,
												javax.swing.GroupLayout.PREFERRED_SIZE, 100,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(28, 28, 28)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(label).addComponent(jScrollPane2,
												javax.swing.GroupLayout.PREFERRED_SIZE, 27,
												javax.swing.GroupLayout.PREFERRED_SIZE))))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(next)
						.addComponent(finish))
				.addGap(32, 32, 32)));
		if (this.questionList.size() == questionNo) {
			//JOptionPane.showMessageDialog(this, "IN last question");
			finish.setEnabled(true);
			next.setEnabled(false);
		}

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void formWindowClosing(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing
		parent.setVisible(true);
		this.dispose();
	}// GEN-LAST:event_formWindowClosing

	private void formWindowOpened(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowOpened
		// jLabel1.setText("Duration : " + duration + " Minutes");
		tr.start();
		updateLabel();
	}// GEN-LAST:event_formWindowOpened

	private void nextActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nextActionPerformed
		String ans = "";
		// if(e.getSource()==next){
		
		if(answer.getText().length()>0) {
			ans = answer.getText();
		}else {
			ans ="NOTATTEMPTED~";
		}
		
		Integer result = 0;
		boolean flag = true;
		while (flag) {

			try {
				/// *****Add code only here////

				result = this.serverObj.submitQuestion((Integer) this.user.getSid(), this.questionNo, ans, this.paperId,
						this.subId);

				System.out.println("making submit question");
				flag = false;

			} catch (Exception e) {
				System.out.println("will get new serverobject and the recall the function again");
				ServerList serving = null;
				try {
					System.out.println("Calling server");
					serving = server1.giveServer();
					System.out.println("After call server");

				} catch (Exception ex) {
					System.err.println("Server1 failed to give server calling server2");
					try {
						serving = server2.giveServer();
					} catch (Exception ex2) {
						// TODO EXIT POPUP
						JOptionPane.showMessageDialog(this,"No server to serve at this moment try again Later");
						System.err.println("NO SERVER TO SERVE");
						// TODO ADD OPOP
						System.exit(1);
					}
				}
				//
				System.out.println("Getting new server obj");
				this.serverObj = null;

				try {
					Registry registrymain = LocateRegistry.getRegistry(serving.getMainIP(), serving.getMainPORT());
					this.serverObj = (AddI) registrymain.lookup(serving.getMainOBJ());
				} catch (Exception exxs) {
					// TODO: handle exception
				}
			}
		} // }
		if (result == -1) {
			JOptionPane.showMessageDialog(this, "Some Poblem with DB");
		} else {
			long duration = time;
			int frametype = ((Question) questionList.get(this.questionNo)).getQtype();
			Integer paperId = this.paperId;
			Integer subId = this.subId;
			this.questionNo++;
			System.out.println(this.questionNo);
			if (frametype == 1) {
				Condexmmultype f = new Condexmmultype(duration, user, serverObj, server1, server2, this.questionNo,
						(ArrayList<Object>) questionList, paperId, subId);
				f.setLocationRelativeTo(null);
				f.setVisible(true);
				f.setExtendedState(Frame.MAXIMIZED_BOTH);
				f.setParentFrame(parent);
				//this.setVisible(false);
				this.dispose();
			} else if (frametype == 2) {
				Condexmmulans f = new Condexmmulans(duration, user, serverObj, server1, server2, this.questionNo,
						(ArrayList<Object>) questionList, paperId, subId);
				f.setLocationRelativeTo(null);
				f.setVisible(true);
				 f.setExtendedState(Frame.MAXIMIZED_BOTH);
				 f.setParentFrame(parent);
				//this.setVisible(false);
				dispose();
			} else if (frametype == 3) {
				Condexmsub f = new Condexmsub(duration, user, serverObj, server1, server2, this.questionNo,
						(ArrayList<Object>) questionList, paperId, subId);
				f.setLocationRelativeTo(null);
				f.setVisible(true);
				f.setExtendedState(Frame.MAXIMIZED_BOTH);
				f.setParentFrame(parent);
				//this.setVisible(false);
				dispose();
			}
		}
	}
		
		// TODO add your handling code here:

	private void finishActionPerformed(java.awt.event.ActionEvent evt) {
		System.out.println("Finsih");

		String ans = "";
		// if(e.getSource()==next){
		
		if(answer.getText().length()>0) {
			ans = answer.getText();
		}else {
			ans ="NOTATTEMPTED~";
		}
		
		Integer result = 0;
		boolean flag = true;
		while (flag) {

			try {
				/// *****Add code only here////

				result = this.serverObj.submitQuestion((Integer) this.user.getSid(), -1, ans, this.paperId, this.subId);

				System.out.println("making submit question");
				flag = false;

			} catch (Exception e) {
				System.out.println("will get new serverobject and the recall the function again");
				ServerList serving = null;
				try {
					System.out.println("Calling server");
					serving = server1.giveServer();
					System.out.println("After call server");

				} catch (Exception ex) {
					System.err.println("Server1 failed to give server calling server2");
					try {
						serving = server2.giveServer();
					} catch (Exception ex2) {
						
						JOptionPane.showMessageDialog(this,"No server to serve at this moment try again Later");
						System.err.println("NO SERVER TO SERVE");
						// TODO ADD OPOP
						System.exit(1);
					}
				}
				//
				System.out.println("Getting new server obj");
				this.serverObj = null;

				try {
					Registry registrymain = LocateRegistry.getRegistry(serving.getMainIP(), serving.getMainPORT());
					this.serverObj = (AddI) registrymain.lookup(serving.getMainOBJ());
				} catch (Exception exxs) {
					// TODO: handle exception
				}
			}
		} // }
		if (result == -1) {
			JOptionPane.showMessageDialog(this, "Some Poblem with DB");
		} else {
			JOptionPane.showMessageDialog(this, "Goto Home");
			MainFrame f = new MainFrame(serverObj,server1,server2,true); f.setLocationRelativeTo(null);
			f.setLocationRelativeTo(null);
			f.setVisible(true);
			f.setExtendedState(MAXIMIZED_BOTH);
			dispose();
		}
	}// GEN-LAST:event_finishActionPerformed

	private void updateLabel() {
		timeleft.setText("Time Remaining : " + time / 60 + " Minutes " + time % 60 + " Seconds");
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextArea answer;
	private javax.swing.JButton finish;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JLabel label;
	private javax.swing.JButton next;
	private javax.swing.JLabel queno1;
	private javax.swing.JLabel question;
	private javax.swing.JLabel questionno;
	private javax.swing.JLabel timeleft;
	private javax.swing.JLabel username;
	// End of variables declaration//GEN-END:variables
	private JFrame parent;

	@Override
	public void actionPerformed(ActionEvent e) {
		if (time >= 1) {
			time--;
		}
		updateLabel();
		if (time == 0) {
			tr.stop();
			JOptionPane.showMessageDialog(this, "Time Over\nYour Exam will now Finish");

			
			System.out.println("Finsih");

			String solution = "";
			
			Integer result = 0;
			boolean flag = true;
			while (flag) {

				try {
					/// *****Add code only here////

					result = this.serverObj.submitQuestion((Integer) this.user.getSid(), -2, solution, this.paperId,
							this.subId);

					System.out.println("making submit question");
					flag = false;

				} catch (Exception ex) {
					System.out.println("will get new serverobject and the recall the function again");
					ServerList serving = null;
					try {
						System.out.println("Calling server");
						serving = server1.giveServer();
						System.out.println("After call server");

					} catch (Exception exx) {
						System.err.println("Server1 failed to give server calling server2");
						try {
							serving = server2.giveServer();
						} catch (Exception ex2) {
							// TODO EXIT POPUP
							JOptionPane.showMessageDialog(this,"No server to serve at this moment try again Later");
							System.err.println("NO SERVER TO SERVE");
							// TODO ADD OPOP
							System.exit(1);
						}
					}
					//
					System.out.println("Getting new server obj");
					this.serverObj = null;

					try {
						Registry registrymain = LocateRegistry.getRegistry(serving.getMainIP(), serving.getMainPORT());
						this.serverObj = (AddI) registrymain.lookup(serving.getMainOBJ());
					} catch (Exception exxs) {
						// TODO: handle exception
					}
				}
			}
			if (result == -1) {
				JOptionPane.showMessageDialog(this, "Some Poblem with DB");
			} else {

				JOptionPane.showMessageDialog(this, "Goto Home");
				MainFrame f = new MainFrame(serverObj,server1,server2,true); f.setLocationRelativeTo(null);
				f.setLocationRelativeTo(null);
				f.setVisible(true);
				f.setExtendedState(MAXIMIZED_BOTH);
				dispose();
			}

		
		}
	}

}
